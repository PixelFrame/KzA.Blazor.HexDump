<span class="hxdp-hexvalue-line">
    <CascadingValue Value="@Parent">
        @for (var i = 0; i < Data.Length; i++)
        {
            <HexValue Value="@Data[i]" Coordinate="(i, Index)" @ref="HexValueRef" />
            if (i == 7)
            {
                <span class="hxdp-hexvalue-splitter"></span>
            }
        }
    </CascadingValue>
</span>

@code {
    [Parameter]
    public byte[] Data { get; set; } = Array.Empty<byte>();

    public List<HexValue> HexValues { get; } = new();
    HexValue HexValueRef
    {
        set
        {
            HexValues.Add(value);
        }
    }

    [Parameter]
    public int Index { get; set; } = 0;

    [Parameter]
    public HexDump? Parent { get; set; }


    internal void HoverHexValue(int Coordinate)
    {
        HexValues[Coordinate].Hover();
    }

    internal void UnhoverHexValue(int Coordinate)
    {
        HexValues[Coordinate].Unhover();
    }

    internal void HighlightHexValue(int Coordinate)
    {
        HexValues[Coordinate].Highlight();
    }

    internal void UnhighlightHexValue(int Coordinate)
    {
        HexValues[Coordinate].Unhighlight();
    }

    public override string ToString()
    {
        return string.Join(" ", Data.Select(x => x.ToString("X2")));
    }

    public string ToString(bool FillUpLine)
    {
        var str = this.ToString();
        if (!FillUpLine) return str;
        if (str.Length < 47) str += new string(' ', 47 - str.Length);
        return str;
    }
}

<span class="@(string.Join(" ", itemClass))"
@onmouseover="OnMouseOver"
@onmouseout="OnMouseOut"
@onmousedown="OnMouseDown"
@onmouseup="OnMouseUp">
    @Value.ToString("X2")
</span>

@code {
    List<string> itemClass = new() { "hxdp-hexvalue" };
    bool IsHighlighted = false;

    [Parameter]
    public byte Value { get; set; } = 0x00;

    [Parameter]
    public (int, int) Coordinate { get; set; } = (0, 0);

    [CascadingParameter]
    public HexDump? Parent { get; set; }

    void OnMouseOver(MouseEventArgs args)
    {
        Hover();
        Parent?.HoverAsciiValue(Coordinate);
        if (Parent != null) Parent.LastHoveredHex = Coordinate;
        StateHasChanged();
    }

    void OnMouseOut(MouseEventArgs args)
    {
        Unhover();
        Parent?.UnhoverAsciiValue(Coordinate);
        StateHasChanged();
    }

    void OnMouseDown(MouseEventArgs args)
    {
        if(Parent==null) return;
        Parent.HexClicked();
        Parent.StartCoordinate = Coordinate;
    }

    void OnMouseUp(MouseEventArgs args)
    {
        if (Parent == null) return;
        if (Parent.ClickedItemType != 1) return;
        Parent.StopCoordinate = Coordinate;
    }

    internal void Highlight()
    {
        if (IsHighlighted) return;
        itemClass.Add("hxdp-highlight");
        IsHighlighted = true;
    }

    internal void Unhighlight()
    {
        if (!IsHighlighted) return;
        itemClass.Remove("hxdp-highlight");
        IsHighlighted = false;
    }

    internal void Hover()
    {
        itemClass.Add("hxdp-hover");
        StateHasChanged();
    }

    internal void Unhover()
    {
        itemClass.Remove("hxdp-hover");
        StateHasChanged();
    }
}

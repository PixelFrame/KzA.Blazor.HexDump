<div class="hxdp">
    @if (DataInspectionPosition == DataInspectionPosition.Top)
    {
        <ValueInspection Data="@SelectedData" Position="DataInspectionPosition.Top" />
    }
    <div class="hxdp-row">
        @if (DataInspectionPosition == DataInspectionPosition.Left)
        {
            <ValueInspection Data="@SelectedData" Position="DataInspectionPosition.Left" />
        }
        <div class="hxdp-main" @onmouseup="OnMouseUp" @onmousemove="OnMouseMove">
            <div class="hxdp-col-line">
                @LineNumberFragment
            </div>
            <div class="hxdp-col-hex">
                @HexValueFragment
            </div>
            <div class="hxdp-col-ascii">
                @AsciiValueFragment
            </div>
        </div>
        @if (DataInspectionPosition == DataInspectionPosition.Right)
        {
            <ValueInspection Data="@SelectedData" Position="@DataInspectionPosition.Right" />
        }
    </div>
    @if (DataInspectionPosition == DataInspectionPosition.Bottom)
    {
        <ValueInspection Data="@SelectedData" Position="DataInspectionPosition.Bottom" />
    }
</div>

@code
{
    [Parameter]
    public byte[] Data { get; set; } = Array.Empty<byte>();
    int DataId = 0;

    [Parameter]
    public bool BlockSelection { get; set; } = true;

    [Parameter]
    public DataInspectionPosition DataInspectionPosition { get; set; } = DataInspectionPosition.Right;

    RenderFragment LineNumberFragment = @<br>;
    RenderFragment HexValueFragment = @<br>;
    RenderFragment AsciiValueFragment = @<br>;

    List<HexValueLine> HexValueLines = new();
    List<AsciiValueLine> AsciiValueLines = new();
    internal int ClickedItemType = 1;
    internal void HexClicked()
    {
        ClickedItemType = 1;
        StopCoordinate = (-1, -1);
    }
    internal void AsciiClicked()
    {
        ClickedItemType = 2;
        StopCoordinate = (-1, -1);
    }
    internal (int, int) LastHoveredHex = (-1, -1);
    internal (int, int) LastHoveredAscii = (-1, -1);
    internal (int, int) StartCoordinate = (-1, -1);
    internal (int, int) StopCoordinate = (-1, -1);
    List<int> SelectedIndices = new();
    byte[] SelectedData = Array.Empty<byte>();

    protected override void OnParametersSet()
    {
        var newDataId = Data.GetHashCode();
        if (newDataId == DataId)
            return;
        DataId = newDataId;
        SelectedIndices.Clear();
        LastHoveredHex = (-1, -1);
        LastHoveredAscii = (-1, -1);
        StartCoordinate = (-1, -1);
        StopCoordinate = (-1, -1);
        SelectedData = Array.Empty<byte>();
        var linecnt = (int)Math.Ceiling(Data.Length / 16.0);
        if (linecnt < HexValueLines.Count)
        {
            HexValueLines.RemoveRange(linecnt, HexValueLines.Count - linecnt);
            AsciiValueLines.RemoveRange(linecnt, AsciiValueLines.Count - linecnt);
        }
        LineNumberFragment = new RenderFragment(builder =>
        {
            for (int i = 0; i < linecnt; i++)
            {
                builder.OpenComponent<LineNumber>(0);
                builder.AddAttribute(1, "Value", (uint)(i * 16));
                builder.CloseComponent();
            }
        });

        HexValueFragment = new RenderFragment(builder =>
        {
            for (int i = 0; i < linecnt; i++)
            {
                builder.OpenComponent<HexValueLine>(0);
                builder.AddAttribute(1, "Data", Data.Skip(i * 16).Take(16).ToArray());
                builder.AddAttribute(2, "Index", i);
                builder.AddAttribute(3, "Parent", this);
                builder.AddComponentReferenceCapture(4, hvl => HexValueLines.Add((HexValueLine)hvl));
                builder.CloseComponent();
            }
        });

        AsciiValueFragment = new RenderFragment(builder =>
        {
            for (int i = 0; i < linecnt; i++)
            {
                builder.OpenComponent<AsciiValueLine>(0);
                builder.AddAttribute(1, "Data", Data.Skip(i * 16).Take(16).ToArray());
                builder.AddAttribute(2, "Index", i);
                builder.AddAttribute(3, "Parent", this);
                builder.AddComponentReferenceCapture(4, avl => AsciiValueLines.Add((AsciiValueLine)avl));
                builder.CloseComponent();
            }
        });
        StateHasChanged();
    }

    internal void HoverHexValue((int, int) Coordinate)
    {
        HexValueLines[Coordinate.Item2].HoverHexValue(Coordinate.Item1);
    }

    internal void UnhoverHexValue((int, int) Coordinate)
    {
        HexValueLines[Coordinate.Item2].UnhoverHexValue(Coordinate.Item1);
    }

    internal void HoverAsciiValue((int, int) Coordinate)
    {
        AsciiValueLines[Coordinate.Item2].HoverAsciiValue(Coordinate.Item1);
    }

    internal void UnhoverAsciiValue((int, int) Coordinate)
    {
        AsciiValueLines[Coordinate.Item2].UnhoverAsciiValue(Coordinate.Item1);
    }

    private async Task OnMouseUp(MouseEventArgs args)
    {
        if (StopCoordinate.Item1 == -1)
        {
            StopCoordinate = ClickedItemType == 1 ? LastHoveredHex : LastHoveredAscii;
        }
        CalcPoints(StartCoordinate, StopCoordinate);
        await UpdateSelection();
    }

    private async Task OnMouseMove(MouseEventArgs args)
    {
        if (args.Buttons == 1)
        {
            if (StartCoordinate.Item1 == -1)
            {
                StartCoordinate = ClickedItemType == 1 ? LastHoveredHex : LastHoveredAscii;
            }
            StopCoordinate = ClickedItemType == 1 ? LastHoveredHex : LastHoveredAscii;
            CalcPoints(StartCoordinate, StopCoordinate);
            await UpdateSelection();
        }
    }

    private void CalcPoints((int, int) CoordinateA, (int, int) CoordinateB)
    {
        SelectedIndices.Clear();

        if (BlockSelection)
        {
            var X1 = CoordinateA.Item1 > CoordinateB.Item1 ? CoordinateB.Item1 : CoordinateA.Item1;
            var Y1 = CoordinateA.Item2 > CoordinateB.Item2 ? CoordinateB.Item2 : CoordinateA.Item2;
            var X2 = CoordinateA.Item1 > CoordinateB.Item1 ? CoordinateA.Item1 : CoordinateB.Item1;
            var Y2 = CoordinateA.Item2 > CoordinateB.Item2 ? CoordinateA.Item2 : CoordinateB.Item2;

            for (var y = Y1; y <= Y2; ++y)
            {
                for (var x = X1; x <= X2; ++x)
                {
                    SelectedIndices.Add(y * 16 + x);
                }
            }
        }
        else
        {
            var IDX1 = CoordinateA.Item2 * 16 + CoordinateA.Item1;
            var IDX2 = CoordinateB.Item2 * 16 + CoordinateB.Item1;
            if (IDX1 > IDX2)
            {
                var tmp = IDX1;
                IDX1 = IDX2;
                IDX2 = tmp;
            }
            for (var idx = IDX1; idx <= IDX2; ++idx)
            {
                SelectedIndices.Add(idx);
            }
        }
    }

    private async Task UpdateSelection()
    {
        for (var idx = 0; idx < Data.Length; ++idx)
        {
            if (SelectedIndices.Contains(idx))
            {
                HexValueLines[idx / 16].HighlightHexValue(idx % 16);
                AsciiValueLines[idx / 16].HighlightAsciiValue(idx % 16);
            }
            else
            {
                HexValueLines[idx / 16].UnhighlightHexValue(idx % 16);
                AsciiValueLines[idx / 16].UnhighlightAsciiValue(idx % 16);
            }
        }
        SelectedData = SelectedIndices.Select(v => Data[v]).ToArray();
        await InvokeAsync(StateHasChanged);
    }

    public override string ToString()
    {
        var sb = new System.Text.StringBuilder();
        /* Generated by copilot... But I'm not using this
        for (var idx = 0; idx < Data.Length; ++idx)
        {
            if (idx % 16 == 0)
            {
                sb.Append($"{idx:X8} ");
            }
            sb.Append($"{Data[idx]:X2} ");
            if (idx % 16 == 15)
            {
                sb.Append(" ");
                for (var idx2 = idx - 15; idx2 <= idx; ++idx2)
                {
                    sb.Append(Data[idx2] < 32 ? '.' : (char)Data[idx2]);
                }
                sb.AppendLine();
            }
        }
        if (Data.Length % 16 != 0)
        {
            var idx = Data.Length;
            var idx2 = idx - (idx % 16);
            for (; idx2 < idx; ++idx2)
            {
                sb.Append($"{Data[idx2]:X2} ");
            }
            for (; idx2 < idx - 1; ++idx2)
            {
                sb.Append("   ");
            }
            sb.Append(" ");
            for (idx2 = idx - (idx % 16); idx2 < idx; ++idx2)
            {
                sb.Append(Data[idx2] < 32 ? '.' : (char)Data[idx2]);
            }
            sb.AppendLine();
        }*/
        for (var idx = 0; idx < HexValueLines.Count; ++idx)
        {
            sb.Append(idx.ToString("X8"));
            sb.Append("   ");
            sb.Append(HexValueLines[idx].ToString(true));
            sb.Append("  |");
            sb.Append(AsciiValueLines[idx].ToString(true));
            sb.Append("|");
            sb.AppendLine();
        }
        return sb.ToString();
    }

    public string SelectionToString(bool IsHexOrAscii)
    {
        var sb = new System.Text.StringBuilder();
        foreach (var idx in SelectedIndices)
        {
            if (IsHexOrAscii) sb.Append(Data[idx].ToString("X2"));
            else sb.Append(Helper.AsciiFromByte(Data[idx]));
            sb.Append(' ');
        }
        return sb.ToString();
    }
}